from typing import Any

import bpy
import blf
import gpu
import math
from bpy_extras import view3d_utils
from gpu_extras.batch import batch_for_shader
from bpy.types import (
    Gizmo,
    GizmoGroup,
)
import mathutils
from math import radians

from bms_blender_plugin.common.bml_structs import DofType
from bms_blender_plugin.common.blender_types import BlenderNodeType
from bms_blender_plugin.common.util import get_bml_type, get_parent_dof_or_switch
from bms_blender_plugin.ui_tools.dof_behaviour import is_dof_input_within_limits

"""
Script to print() an objects vertices and indices from Blender to be used as Gizmos
###########
import bpy
import numpy as np
mesh = bpy.context.active_object.data
mesh.calc_loop_triangles()
vertices = np.empty((len(mesh.vertices), 3), 'f')
indices = np.empty((len(mesh.loop_triangles), 3), 'i')
mesh.vertices.foreach_get(
    "co", np.reshape(vertices, len(mesh.vertices) * 3))
mesh.loop_triangles.foreach_get(
    "vertices", np.reshape(indices, len(mesh.loop_triangles) * 3))
print("\n" * 10)
print(f"vertices = ")
for vertex in vertices:
    print(f"({vertex[0]}, {vertex[1]}, {vertex[2]}),")
print(f"indices = ")
print(tuple(tuple(sublist) for sublist in indices))
###########
"""

rotate_shape_indices = (
    (29, 30, 65),
    (29, 65, 64),
    (16, 17, 52),
    (16, 52, 51),
    (3, 4, 39),
    (3, 39, 38),
    (30, 31, 66),
    (30, 66, 65),
    (17, 18, 53),
    (17, 53, 52),
    (4, 5, 40),
    (4, 40, 39),
    (18, 19, 54),
    (18, 54, 53),
    (5, 6, 41),
    (5, 41, 40),
    (33, 143, 141),
    (33, 141, 67),
    (19, 20, 55),
    (19, 55, 54),
    (6, 7, 42),
    (6, 42, 41),
    (32, 142, 68),
    (32, 68, 34),
    (20, 21, 56),
    (20, 56, 55),
    (7, 8, 43),
    (7, 43, 42),
    (21, 22, 57),
    (21, 57, 56),
    (8, 9, 44),
    (8, 44, 43),
    (22, 23, 58),
    (22, 58, 57),
    (9, 10, 45),
    (9, 45, 44),
    (23, 24, 59),
    (23, 59, 58),
    (10, 11, 46),
    (10, 46, 45),
    (24, 25, 60),
    (24, 60, 59),
    (11, 12, 47),
    (11, 47, 46),
    (25, 26, 61),
    (25, 61, 60),
    (12, 13, 48),
    (12, 48, 47),
    (26, 27, 62),
    (26, 62, 61),
    (13, 14, 49),
    (13, 49, 48),
    (0, 1, 36),
    (0, 36, 35),
    (27, 28, 63),
    (27, 63, 62),
    (14, 15, 50),
    (14, 50, 49),
    (1, 2, 37),
    (1, 37, 36),
    (28, 29, 64),
    (28, 64, 63),
    (15, 16, 51),
    (15, 51, 50),
    (2, 3, 38),
    (2, 38, 37),
    (98, 133, 134),
    (98, 134, 99),
    (85, 120, 121),
    (85, 121, 86),
    (72, 107, 108),
    (72, 108, 73),
    (99, 134, 135),
    (99, 135, 100),
    (86, 121, 122),
    (86, 122, 87),
    (73, 108, 109),
    (73, 109, 74),
    (87, 122, 123),
    (87, 123, 88),
    (74, 109, 110),
    (74, 110, 75),
    (102, 137, 140),
    (102, 140, 139),
    (88, 123, 124),
    (88, 124, 89),
    (75, 110, 111),
    (75, 111, 76),
    (101, 103, 138),
    (101, 138, 136),
    (89, 124, 125),
    (89, 125, 90),
    (76, 111, 112),
    (76, 112, 77),
    (90, 125, 126),
    (90, 126, 91),
    (77, 112, 113),
    (77, 113, 78),
    (91, 126, 127),
    (91, 127, 92),
    (78, 113, 114),
    (78, 114, 79),
    (92, 127, 128),
    (92, 128, 93),
    (79, 114, 115),
    (79, 115, 80),
    (93, 128, 129),
    (93, 129, 94),
    (80, 115, 116),
    (80, 116, 81),
    (94, 129, 130),
    (94, 130, 95),
    (81, 116, 117),
    (81, 117, 82),
    (95, 130, 131),
    (95, 131, 96),
    (82, 117, 118),
    (82, 118, 83),
    (69, 104, 105),
    (69, 105, 70),
    (96, 131, 132),
    (96, 132, 97),
    (83, 118, 119),
    (83, 119, 84),
    (70, 105, 106),
    (70, 106, 71),
    (97, 132, 133),
    (97, 133, 98),
    (84, 119, 120),
    (84, 120, 85),
    (71, 106, 107),
    (71, 107, 72),
    (1, 0, 69),
    (1, 69, 70),
    (2, 1, 70),
    (2, 70, 71),
    (3, 2, 71),
    (3, 71, 72),
    (4, 3, 72),
    (4, 72, 73),
    (5, 4, 73),
    (5, 73, 74),
    (6, 5, 74),
    (6, 74, 75),
    (7, 6, 75),
    (7, 75, 76),
    (8, 7, 76),
    (8, 76, 77),
    (9, 8, 77),
    (9, 77, 78),
    (10, 9, 78),
    (10, 78, 79),
    (11, 10, 79),
    (11, 79, 80),
    (12, 11, 80),
    (12, 80, 81),
    (13, 12, 81),
    (13, 81, 82),
    (14, 13, 82),
    (14, 82, 83),
    (15, 14, 83),
    (15, 83, 84),
    (16, 15, 84),
    (16, 84, 85),
    (17, 16, 85),
    (17, 85, 86),
    (18, 17, 86),
    (18, 86, 87),
    (19, 18, 87),
    (19, 87, 88),
    (20, 19, 88),
    (20, 88, 89),
    (21, 20, 89),
    (21, 89, 90),
    (22, 21, 90),
    (22, 90, 91),
    (23, 22, 91),
    (23, 91, 92),
    (24, 23, 92),
    (24, 92, 93),
    (25, 24, 93),
    (25, 93, 94),
    (26, 25, 94),
    (26, 94, 95),
    (27, 26, 95),
    (27, 95, 96),
    (28, 27, 96),
    (28, 96, 97),
    (29, 28, 97),
    (29, 97, 98),
    (30, 29, 98),
    (30, 98, 99),
    (31, 30, 99),
    (31, 99, 100),
    (139, 31, 100),
    (139, 100, 32),
    (143, 33, 102),
    (143, 102, 139),
    (32, 34, 103),
    (32, 103, 101),
    (35, 36, 105),
    (35, 105, 104),
    (36, 37, 106),
    (36, 106, 105),
    (37, 38, 107),
    (37, 107, 106),
    (38, 39, 108),
    (38, 108, 107),
    (39, 40, 109),
    (39, 109, 108),
    (40, 41, 110),
    (40, 110, 109),
    (41, 42, 111),
    (41, 111, 110),
    (42, 43, 112),
    (42, 112, 111),
    (43, 44, 113),
    (43, 113, 112),
    (44, 45, 114),
    (44, 114, 113),
    (45, 46, 115),
    (45, 115, 114),
    (46, 47, 116),
    (46, 116, 115),
    (47, 48, 117),
    (47, 117, 116),
    (48, 49, 118),
    (48, 118, 117),
    (49, 50, 119),
    (49, 119, 118),
    (50, 51, 120),
    (50, 120, 119),
    (51, 52, 121),
    (51, 121, 120),
    (52, 53, 122),
    (52, 122, 121),
    (53, 54, 123),
    (53, 123, 122),
    (54, 55, 124),
    (54, 124, 123),
    (55, 56, 125),
    (55, 125, 124),
    (56, 57, 126),
    (56, 126, 125),
    (57, 58, 127),
    (57, 127, 126),
    (58, 59, 128),
    (58, 128, 127),
    (59, 60, 129),
    (59, 129, 128),
    (60, 61, 130),
    (60, 130, 129),
    (61, 62, 131),
    (61, 131, 130),
    (62, 63, 132),
    (62, 132, 131),
    (63, 64, 133),
    (63, 133, 132),
    (64, 65, 134),
    (64, 134, 133),
    (65, 66, 135),
    (65, 135, 134),
    (67, 141, 140),
    (67, 140, 137),
    (68, 142, 136),
    (68, 136, 138),
    (33, 67, 137),
    (33, 137, 102),
    (34, 68, 138),
    (34, 138, 103),
    (0, 35, 104),
    (0, 104, 69),
    (66, 140, 142),
    (66, 142, 135),
    (100, 135, 142),
    (100, 142, 32),
    (31, 139, 140),
    (31, 140, 66),
    (136, 141, 143),
    (136, 143, 101),
    (140, 141, 136),
    (140, 136, 142),
    (143, 139, 32),
    (143, 32, 101),
)
rotate_shape_verts = (
    (-1.0199759006500244, -0.0009813514770939946, 0.0),
    (-1.015088438987732, -0.09997748583555222, 0.0),
    (-1.0004009008407593, -0.19899213314056396, 0.0),
    (-0.9760791659355164, -0.29609036445617676, 0.0),
    (-0.942357063293457, -0.39033713936805725, 0.0),
    (-0.8995596766471863, -0.48082467913627625, 0.0),
    (-0.8480989933013916, -0.5666816234588623, 0.0),
    (-0.7884706258773804, -0.647081196308136, 0.0),
    (-0.7212489247322083, -0.7212489247322083, 0.0),
    (-0.647081196308136, -0.7884706258773804, 0.0),
    (-0.5666816234588623, -0.8480989933013916, 0.0),
    (-0.48082467913627625, -0.8995596766471863, 0.0),
    (-0.39033713936805725, -0.942357063293457, 0.0),
    (-0.29609036445617676, -0.9760791659355164, 0.0),
    (-0.19899213314056396, -1.0004009008407593, 0.0),
    (-0.09997748583555222, -1.015088438987732, 0.0),
    (0.0, -1.0199999809265137, 0.0),
    (0.09997748583555222, -1.015088438987732, 0.0),
    (0.19899213314056396, -1.0004009008407593, 0.0),
    (0.29609036445617676, -0.9760791659355164, 0.0),
    (0.39033713936805725, -0.942357063293457, 0.0),
    (0.48082467913627625, -0.8995596766471863, 0.0),
    (0.5666816234588623, -0.8480989933013916, 0.0),
    (0.647081196308136, -0.7884706258773804, 0.0),
    (0.7212489247322083, -0.7212489247322083, 0.0),
    (0.7884706258773804, -0.647081196308136, 0.0),
    (0.8480989933013916, -0.5666816234588623, 0.0),
    (0.8995596766471863, -0.48082467913627625, 0.0),
    (0.942357063293457, -0.39033713936805725, 0.0),
    (0.9760791659355164, -0.29609036445617676, 0.0),
    (1.0004009008407593, -0.19899213314056396, 0.0),
    (1.015088438987732, -0.09997748583555222, 0.0),
    (0.9771780371665955, -0.057253215461969376, 0.0),
    (1.18748939037323, -0.2678099572658539, -0.006360352970659733),
    (0.7955996990203857, -0.24283373355865479, 0.0),
    (-1.0199759006500244, -0.000981353223323822, 0.02999139204621315),
    (-1.015088438987732, -0.09997748583555222, 0.02999139204621315),
    (-1.0004009008407593, -0.19899213314056396, 0.02999139204621315),
    (-0.9760791659355164, -0.29609036445617676, 0.02999139204621315),
    (-0.942357063293457, -0.39033713936805725, 0.02999139204621315),
    (-0.8995596766471863, -0.48082467913627625, 0.02999139204621315),
    (-0.8480989933013916, -0.5666816234588623, 0.02999139204621315),
    (-0.7884706258773804, -0.647081196308136, 0.02999139204621315),
    (-0.7212489247322083, -0.7212489247322083, 0.02999139204621315),
    (-0.647081196308136, -0.7884706258773804, 0.02999139204621315),
    (-0.5666816234588623, -0.8480989933013916, 0.02999139204621315),
    (-0.48082470893859863, -0.8995596766471863, 0.02999139204621315),
    (-0.39033710956573486, -0.942357063293457, 0.02999139204621315),
    (-0.29609036445617676, -0.9760791659355164, 0.02999139204621315),
    (-0.19899213314056396, -1.0004009008407593, 0.02999139204621315),
    (-0.09997749328613281, -1.015088438987732, 0.02999139204621315),
    (0.0, -1.0199999809265137, 0.02999139204621315),
    (0.09997749328613281, -1.015088438987732, 0.02999139204621315),
    (0.19899213314056396, -1.0004009008407593, 0.02999139204621315),
    (0.29609036445617676, -0.9760791659355164, 0.02999139204621315),
    (0.39033710956573486, -0.942357063293457, 0.02999139204621315),
    (0.48082470893859863, -0.8995596766471863, 0.02999139204621315),
    (0.5666816234588623, -0.8480989933013916, 0.02999139204621315),
    (0.6470812559127808, -0.7884706258773804, 0.02999139204621315),
    (0.721248984336853, -0.7212489247322083, 0.02999139204621315),
    (0.7884706258773804, -0.647081196308136, 0.02999139204621315),
    (0.8480989933013916, -0.5666816234588623, 0.02999139204621315),
    (0.8995596170425415, -0.48082467913627625, 0.02999139204621315),
    (0.942357063293457, -0.39033713936805725, 0.02999139204621315),
    (0.9760791063308716, -0.29609036445617676, 0.02999139204621315),
    (1.0004009008407593, -0.19899213314056396, 0.02999139204621315),
    (1.015088438987732, -0.09997748583555222, 0.02999139204621315),
    (1.18748939037323, -0.2678099572658539, 0.02999139204621315),
    (0.7955996990203857, -0.24283373355865479, 0.02999139204621315),
    (-0.9800240993499756, 0.0009813514770939946, 0.0),
    (-0.9752810001373291, -0.09605679661035538, 0.0),
    (-0.9611695408821106, -0.1911885142326355, 0.0),
    (-0.9378015398979187, -0.28447896242141724, 0.0),
    (-0.9054019451141357, -0.3750297725200653, 0.0),
    (-0.8642827868461609, -0.4619688093662262, 0.0),
    (-0.8148401975631714, -0.5444588661193848, 0.0),
    (-0.7575502395629883, -0.6217054724693298, 0.0),
    (-0.6929646134376526, -0.6929646134376526, 0.0),
    (-0.6217054724693298, -0.7575502395629883, 0.0),
    (-0.5444588661193848, -0.8148401975631714, 0.0),
    (-0.4619688093662262, -0.8642827868461609, 0.0),
    (-0.3750297725200653, -0.9054019451141357, 0.0),
    (-0.28447896242141724, -0.9378015398979187, 0.0),
    (-0.1911885142326355, -0.9611695408821106, 0.0),
    (-0.09605679661035538, -0.9752810001373291, 0.0),
    (0.0, -0.9800000190734863, 0.0),
    (0.09605679661035538, -0.9752810001373291, 0.0),
    (0.1911885142326355, -0.9611695408821106, 0.0),
    (0.28447896242141724, -0.9378015398979187, 0.0),
    (0.3750297725200653, -0.9054019451141357, 0.0),
    (0.4619688093662262, -0.8642827868461609, 0.0),
    (0.5444588661193848, -0.8148401975631714, 0.0),
    (0.6217054724693298, -0.7575502395629883, 0.0),
    (0.6929646134376526, -0.6929646134376526, 0.0),
    (0.7575502395629883, -0.6217054724693298, 0.0),
    (0.8148401975631714, -0.5444588661193848, 0.0),
    (0.8642827868461609, -0.4619688093662262, 0.0),
    (0.9054019451141357, -0.3750297725200653, 0.0),
    (0.9378015398979187, -0.28447896242141724, 0.0),
    (0.9611695408821106, -0.1911885142326355, 0.0),
    (0.9752810001373291, -0.09605679661035538, 0.0),
    (0.9800341129302979, 0.0011675171554088593, 0.0),
    (1.1533793210983276, -0.2887026369571686, -0.006360352970659733),
    (0.764661431312561, -0.21747982501983643, 0.0),
    (-0.9800240993499756, 0.000981353223323822, 0.02999139204621315),
    (-0.9752810001373291, -0.09605679661035538, 0.02999139204621315),
    (-0.9611695408821106, -0.1911885142326355, 0.02999139204621315),
    (-0.9378015398979187, -0.28447896242141724, 0.02999139204621315),
    (-0.9054019451141357, -0.3750297725200653, 0.02999139204621315),
    (-0.8642827868461609, -0.4619688093662262, 0.02999139204621315),
    (-0.8148401975631714, -0.5444588661193848, 0.02999139204621315),
    (-0.7575502395629883, -0.6217054724693298, 0.02999139204621315),
    (-0.6929646134376526, -0.6929646134376526, 0.02999139204621315),
    (-0.6217054724693298, -0.7575502395629883, 0.02999139204621315),
    (-0.5444588661193848, -0.8148401975631714, 0.02999139204621315),
    (-0.4619687795639038, -0.8642827868461609, 0.02999139204621315),
    (-0.3750298023223877, -0.9054019451141357, 0.02999139204621315),
    (-0.28447896242141724, -0.9378015398979187, 0.02999139204621315),
    (-0.1911885142326355, -0.9611695408821106, 0.02999139204621315),
    (-0.09605681896209717, -0.9752810001373291, 0.02999139204621315),
    (0.0, -0.9800000190734863, 0.02999139204621315),
    (0.09605681896209717, -0.9752810001373291, 0.02999139204621315),
    (0.19118845462799072, -0.9611695408821106, 0.02999139204621315),
    (0.284479022026062, -0.9378015398979187, 0.02999139204621315),
    (0.3750298023223877, -0.9054019451141357, 0.02999139204621315),
    (0.4619687795639038, -0.8642827868461609, 0.02999139204621315),
    (0.5444588661193848, -0.8148401975631714, 0.02999139204621315),
    (0.6217054128646851, -0.7575502395629883, 0.02999139204621315),
    (0.6929646730422974, -0.6929646134376526, 0.02999139204621315),
    (0.7575502395629883, -0.6217054724693298, 0.02999139204621315),
    (0.8148401975631714, -0.5444588661193848, 0.02999139204621315),
    (0.8642827272415161, -0.4619688093662262, 0.02999139204621315),
    (0.9054019451141357, -0.3750297725200653, 0.02999139204621315),
    (0.9378014802932739, -0.28447896242141724, 0.02999139204621315),
    (0.9611696004867554, -0.1911885142326355, 0.02999139204621315),
    (0.9752810001373291, -0.09605679661035538, 0.02999139204621315),
    (0.9800406694412231, 0.001275528222322464, 0.02999139204621315),
    (1.1533793210983276, -0.2887026369571686, 0.02999139204621315),
    (0.764661431312561, -0.21747982501983643, 0.02999139204621315),
    (1.0170350074768066, -0.060541048645973206, 0.0),
    (1.017032504081726, -0.06058415770530701, 0.02999139204621315),
    (1.0199593305587769, -0.001275528222322464, 0.02999139204621315),
    (0.9771807193756104, -0.057210106402635574, 0.02999139204621315),
    (1.0199658870697021, -0.0011675171554088593, 0.0),
)


class DOFRotateGizmo(Gizmo):
    bl_idname = "VIEW3D_GT_bml_dof_rotate_gizmo"
    bl_target_properties = ({"id": "dof_value", "type": "FLOAT", "array_length": 1},)
    custom_shape: tuple[Any, Any]
    init_value: float
    init_mouse_x: float
    __slots__ = (
        "custom_shape",
        "init_mouse_x",
        "init_value",
    )

    def draw(self, context):
        self.draw_custom_shape(self.custom_shape)

    def draw_select(self, context, select_id):
        self.draw_custom_shape(self.custom_shape, select_id=select_id)

    def invoke(self, context, event):
        self.init_mouse_x = event.mouse_x
        self.init_value = self.target_get_value("dof_value")
        bpy.ops.ed.undo_push(message=f"Rotate DOF {round(self.init_value, 2)}")
        return {"RUNNING_MODAL"}

    def exit(self, context, cancel):
        context.area.header_text_set(None)
        if cancel:
            self.target_set_value("dof_value", self.init_value)

    def modal(self, context, event, tweak):
        delta = (event.mouse_x - self.init_mouse_x) / 50.0
        if "SNAP" in tweak:
            delta = round(delta)
        if "PRECISE" in tweak:
            delta /= 100.0
        value = self.init_value - delta
        self.target_set_value("dof_value", value)
        context.area.header_text_set(f"DOF Rotation {round(value, 2)}")
        return {"RUNNING_MODAL"}

    def setup(self):
        if not hasattr(self, "custom_shape"):
            shader = gpu.shader.from_builtin("3D_UNIFORM_COLOR")
            batch = batch_for_shader(
                shader,
                "TRIS",
                {"pos": rotate_shape_verts},
                indices=rotate_shape_indices,
            )
            shader.uniform_float("color", (1, 0, 0, 1))
            batch.program_set(shader)
            self.custom_shape = (batch, shader)


class DOFRotateGizmoGroup(GizmoGroup):
    bl_idname = "OBJECT_GGT_dof_rotate"
    bl_label = "DOF Rotate Gizmo Group"
    bl_space_type = "VIEW_3D"
    bl_region_type = "WINDOW"
    bl_options = {"3D", "PERSISTENT", "SHOW_MODAL_ALL"}

    draw_text_handler = None
    prev_obj = None
    rotate_gizmo = None

    @classmethod
    def draw_callback_px(cls, context, obj):
        if obj:
            font_id = 0
            if is_dof_input_within_limits(obj, context):
                blf.color(0, 0, 1, 0, 0.6)
            else:
                blf.color(0, 1, 0, 0, 0.6)
            location_window = view3d_utils.location_3d_to_region_2d(
                context.region,
                context.space_data.region_3d,
                obj.matrix_world.translation,
            )
            if location_window:
                location_window.x += 10
                location_window.y += 10
                blf.position(font_id, location_window.x, location_window.y, 0)

                blf.size(font_id, 15)

                sign = 1
                if obj.dof_reverse:
                    sign = -1
                dof_input = obj.dof_input * obj.dof_multiplier * sign

                blf.draw(
                    font_id,
                    f"{round(dof_input, 2)} / {round(math.degrees(dof_input), 2)}°",
                )

    @classmethod
    def poll(cls, context):
        obj = get_parent_dof_or_switch(context.active_object)

        if is_rotate_dof(obj):
            # DOF object has changed and text is still drawing - remove the text
            if obj != cls.prev_obj and cls.draw_text_handler:
                bpy.types.SpaceView3D.draw_handler_remove(
                    cls.draw_text_handler, "WINDOW"
                )
                cls.draw_text_handler = None

            # no text showing - draw the text
            if not cls.draw_text_handler:
                cls.draw_text_handler = bpy.types.SpaceView3D.draw_handler_add(
                    DOFRotateGizmoGroup.draw_callback_px,
                    (context, obj),
                    "WINDOW",
                    "POST_PIXEL",
                )
            cls.prev_obj = obj
            return True
        else:
            # no DOF selected, remove the text
            if cls.draw_text_handler:
                bpy.types.SpaceView3D.draw_handler_remove(
                    cls.draw_text_handler, "WINDOW"
                )
                cls.draw_text_handler = None
                cls.prev_obj = None
                return False

    def setup(self, context):
        obj = get_parent_dof_or_switch(context.active_object)
        gz = self.gizmos.new(DOFRotateGizmo.bl_idname)
        gz.target_set_prop("dof_value", obj, "dof_input")

        mat_rot = mathutils.Matrix.Rotation(radians(90.0), 4, "X")
        mat_rot = mat_rot @ mathutils.Matrix.Rotation(radians(180), 4, "Y")
        gz.matrix_basis = obj.matrix_world.normalized() @ mat_rot
        gz.line_width = 3

        gz.color = 0.0, 1.0, 0.0
        gz.alpha = 0.4
        self.rotate_gizmo = gz

    def refresh(self, context):
        dof = get_parent_dof_or_switch(context.active_object)

        if dof:
            gz = self.rotate_gizmo
            gz.target_set_prop("dof_value", dof, "dof_input")

            mat_rot = mathutils.Matrix.Rotation(radians(90.0), 4, "X")

            if dof.dof_reverse:
                mat_rot = mat_rot @ mathutils.Matrix.Rotation(radians(0), 4, "Y")
            else:
                mat_rot = mat_rot @ mathutils.Matrix.Rotation(radians(180), 4, "Y")

            gz.matrix_basis = dof.matrix_world.normalized() @ mat_rot

            if is_dof_input_within_limits(dof, context):
                gz.color = 0.0, 1.0, 0.0
            else:
                gz.color = 1.0, 0.0, 0.0


def register():
    bpy.utils.register_class(DOFRotateGizmo)
    bpy.utils.register_class(DOFRotateGizmoGroup)


def unregister():
    bpy.utils.unregister_class(DOFRotateGizmoGroup)
    bpy.utils.unregister_class(DOFRotateGizmo)


def is_rotate_dof(obj):
    return (
        get_bml_type(obj) == BlenderNodeType.DOF and obj.dof_type == DofType.ROTATE.name
    )
